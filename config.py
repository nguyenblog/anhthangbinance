import os
from dotenv import load_dotenv

load_dotenv() # Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ .env

# üß™ Ch·∫ø ƒë·ªô DEV
IS_DEV = os.getenv("IS_DEV", "False").lower() == "true"

# üîê Binance API
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_API_SECRET = os.getenv("BINANCE_API_SECRET")

# Lu√¥n ki·ªÉm tra BINANCE_API_KEY v√† BINANCE_API_SECRET
if not BINANCE_API_KEY or not BINANCE_API_SECRET:
    raise ValueError("‚ùå Vui l√≤ng c·∫•u h√¨nh BINANCE_API_KEY v√† BINANCE_API_SECRET trong .env")

# üì¢ Telegram
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# üì¢ Slack
SLACK_TOKEN = os.getenv("SLACK_TOKEN")
SLACK_CHANNEL_ID = os.getenv("SLACK_CHANNEL_ID")

# N·∫øu c·∫£ Slack l·∫´n Telegram ƒë·ªÅu kh√¥ng c·∫•u h√¨nh th√¨ c·∫£nh b√°o
if (not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID) and (not SLACK_TOKEN or not SLACK_CHANNEL_ID):
    raise ValueError("‚ùå Vui l√≤ng c·∫•u h√¨nh Slack (SLACK_TOKEN, SLACK_CHANNEL_ID) ho·∫∑c Telegram (TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID) trong .env")

# Lu√¥n ki·ªÉm tra SLACK_TOKEN v√† SLACK_CHANNEL_ID
if not SLACK_TOKEN or not SLACK_CHANNEL_ID:
    raise ValueError("‚ùå Vui l√≤ng c·∫•u h√¨nh SLACK_TOKEN v√† SLACK_CHANNEL_ID trong .env")

# ‚è∞ C·∫•u h√¨nh th·ªùi gian ch·∫°y bot cho t·ª´ng timeframe
TIME_INTERVAL_1H = int(os.getenv("TIME_INTERVAL_1H", "60"))
TIME_INTERVAL_UNIT_1H = os.getenv("TIME_INTERVAL_UNIT_1H", "minutes").lower()

TIME_INTERVAL_4H = int(os.getenv("TIME_INTERVAL_4H", "4"))
TIME_INTERVAL_UNIT_4H = os.getenv("TIME_INTERVAL_UNIT_4H", "hours").lower()

TIME_INTERVAL_1D = int(os.getenv("TIME_INTERVAL_1D", "1"))
TIME_INTERVAL_UNIT_1D = os.getenv("TIME_INTERVAL_UNIT_1D", "days").lower()

# C√≥ th·ªÉ gi·ªØ l·∫°i bi·∫øn c≈© ƒë·ªÉ t∆∞∆°ng th√≠ch ho·∫∑c fallback
TIME_INTERVAL = int(os.getenv("TIME_INTERVAL", "1"))
TIME_INTERVAL_UNIT = os.getenv("TIME_INTERVAL_UNIT", "hours").lower() # "minutes" ho·∫∑c "hours"

CANDLE_LIMIT = int(os.getenv("CANDLE_LIMIT", "200")) # S·ªë l∆∞·ª£ng n·∫øn ƒë·ªÉ ph√¢n t√≠ch

# C·∫•u h√¨nh ri√™ng cho t·ª´ng khung th·ªùi gian
CANDLE_INTERVAL_1H = "1h" # Khung th·ªùi gian n·∫øn cho bot 1H
CANDLE_INTERVAL_4H = "4h" # Khung th·ªùi gian n·∫øn cho bot 4H
CANDLE_INTERVAL_1D = "1d" # Khung th·ªùi gian n·∫øn cho bot 1D

# üß™ C·∫•u h√¨nh TEST MODE
TEST_COINS = os.getenv("TEST_COINS", "BTCUSDT,ETHUSDT") # Danh s√°ch coin test, c√°ch nhau b·ªüi d·∫•u ph·∫©y

# ‚öôÔ∏è C·∫•u h√¨nh chi·∫øn l∆∞·ª£c (1H)
RSI_LOWER_1H = int(os.getenv("RSI_LOWER_1H", "40"))
RSI_UPPER_1H = int(os.getenv("RSI_UPPER_1H", "60"))
PRICE_BUFFER_1H = float(os.getenv("PRICE_BUFFER_1H", "1.002")) 
VOLUME_LOOKBACK_1H = int(os.getenv("VOLUME_LOOKBACK_1H", "3")) # S·ªë n·∫øn volume xanh li√™n ti·∫øp c·∫ßn ki·ªÉm tra

# ‚öôÔ∏è C·∫•u h√¨nh chi·∫øn l∆∞·ª£c (4H)
RSI_LOWER_4H = int(os.getenv("RSI_LOWER_4H", "40"))
RSI_UPPER_4H = int(os.getenv("RSI_UPPER_4H", "60"))
PRICE_BUFFER_4H = float(os.getenv("PRICE_BUFFER_4H", "1.002")) 
VOLUME_LOOKBACK_4H = int(os.getenv("VOLUME_LOOKBACK_4H", "3")) # S·ªë n·∫øn volume xanh li√™n ti·∫øp c·∫ßn ki·ªÉm tra

# ‚öôÔ∏è C·∫•u h√¨nh chi·∫øn l∆∞·ª£c (1D) - M·ªöI B·ªî SUNG
RSI_LOWER_1D = int(os.getenv("RSI_LOWER_1D", "40"))
RSI_UPPER_1D = int(os.getenv("RSI_UPPER_1D", "60"))
PRICE_BUFFER_1D = float(os.getenv("PRICE_BUFFER_1D", "1.002")) 
VOLUME_LOOKBACK_1D = int(os.getenv("VOLUME_LOOKBACK_1D", "3")) # S·ªë n·∫øn volume xanh li√™n ti·∫øp c·∫ßn ki·ªÉm tra